{"version":3,"file":"static/js/427.f597b788.chunk.js","mappings":"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","sources":["pages/Login/Login.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport {\n  useDisclosure,\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  FormControl,\n  FormLabel,\n  Input,\n  useToast,\n  Text,\n  InputGroup,\n  InputRightElement,\n  Icon,\n  // Image,\n  Divider,\n  Box,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\n\nimport { logIn } from '../../redux/auth/authSlice';\nimport { useLogInUserMutation } from '../../redux/auth/authApiSlice';\n// import loginPageContent from '../../images/content/loginPageContent.png';\n\nconst Login = () => {\n  const [value, setValue] = useState({\n    email: '',\n    password: '',\n  });\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const toast = useToast();\n  const [logInUser] = useLogInUserMutation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  useEffect(() => {\n    onOpen();\n    return () => onClose();\n    // eslint-disable-next-line\n  }, [location]);\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    setValue(state => ({ ...state, [name]: value }));\n  };\n\n  const handleSubmitForm = async e => {\n    e.preventDefault();\n    if (value.email === '' || value.password === '')\n      return toast({\n        description: 'Please, fill all fields form...',\n        isClosable: true,\n        status: 'error',\n      });\n\n    try {\n      const checkedUser = await logInUser(value);\n\n      dispatch(logIn(checkedUser));\n      setValue({ email: '', password: '' });\n      navigate('/contacts');\n      onClose();\n      toast({\n        description: `Welcome, ${checkedUser.data.user.name} !`,\n        isClosable: true,\n        status: 'success',\n        duration: 3000,\n      });\n    } catch (error) {\n      toast({\n        description:\n          'Wrong username or e-mail. If you`re not signed up yet, you`re welcome to do it!',\n        isClosable: true,\n        status: 'error',\n      });\n    }\n  };\n\n  const handlePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleClickSignUp = () => {\n    navigate('/register');\n  };\n\n  const handleClose = () => {\n    onClose();\n    navigate('/');\n  };\n\n  return (\n    <>\n      <Modal isOpen={isOpen} onClose={handleClose} isCentered>\n        <ModalOverlay />\n        <ModalContent py=\"20px\">\n          <ModalHeader fontSize=\"30px\">Welcome back</ModalHeader>\n          <ModalBody pb=\"20px\">\n            {/* <Image src={loginPageContent} width=\"200px\" mx=\"auto\" /> */}\n            <form onSubmit={handleSubmitForm}>\n              <FormControl py=\"20px\" isRequired>\n                <Divider width=\"70%\" mx=\"auto\" />\n                <FormLabel>Email</FormLabel>\n                <Input\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"example@gmail.com\"\n                  _placeholder={{ opacity: 0.6, color: 'purple.800' }}\n                  focusBorderColor=\"purple.600\"\n                  id=\"login_email\"\n                  value={value.email}\n                  onChange={handleInputChange}\n                />\n                <FormLabel pt=\"20px\">Password</FormLabel>\n                <InputGroup>\n                  <Input\n                    name=\"password\"\n                    type={showPassword ? 'text' : 'password'}\n                    _placeholder={{ opacity: 0.6, color: 'purple.800' }}\n                    focusBorderColor=\"purple.600\"\n                    placeholder=\"********\"\n                    id=\"login_password\"\n                    value={value.password}\n                    onChange={handleInputChange}\n                  />\n                  <InputRightElement width=\"3rem\">\n                    <Button\n                      h=\"1.7rem\"\n                      size=\"sm\"\n                      onClick={handlePasswordVisibility}\n                    >\n                      {showPassword ? (\n                        <Icon as={ViewIcon} />\n                      ) : (\n                        <Icon as={ViewOffIcon} />\n                      )}\n                    </Button>\n                  </InputRightElement>\n                </InputGroup>\n              </FormControl>\n              <Box\n                display=\"flex\"\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                paddingTop=\"40px\"\n              >\n                <Button\n                  maxW=\"120px\"\n                  width=\"100%\"\n                  type=\"submit\"\n                  aria-label=\"Login user\"\n                  colorScheme=\"purple\"\n                  size=\"md\"\n                >\n                  Sign in\n                </Button>\n\n                <Text color=\"purple.800\" fontWeight=\"700\" fontSize=\"lg\">\n                  or\n                </Text>\n                <Button\n                  maxW=\"120px\"\n                  width=\"100%\"\n                  onClick={handleClickSignUp}\n                  aria-label=\"Sign up\"\n                  colorScheme=\"purple\"\n                  size=\"md\"\n                >\n                  Sign Up\n                </Button>\n              </Box>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default Login;\n"],"names":["useState","email","password","value","setValue","location","useLocation","dispatch","useDispatch","navigate","useNavigate","toast","useToast","useLogInUserMutation","logInUser","showPassword","setShowPassword","useDisclosure","isOpen","onOpen","onClose","useEffect","handleInputChange","e","currentTarget","name","state","handleSubmitForm","preventDefault","description","isClosable","status","checkedUser","logIn","data","user","duration","isCentered","py","fontSize","pb","onSubmit","isRequired","width","mx","type","placeholder","_placeholder","opacity","color","focusBorderColor","id","onChange","pt","h","size","onClick","as","ViewIcon","ViewOffIcon","display","justifyContent","alignItems","paddingTop","maxW","colorScheme","fontWeight"],"sourceRoot":""}